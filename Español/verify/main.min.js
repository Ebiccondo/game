!function(){window;const e=document.documentElement;if(e.classList.remove("no-js"),e.classList.add("js"),document.body.classList.contains("has-animations")){(window.sr=ScrollReveal()).reveal(".feature, .pricing-table-inner",{duration:600,distance:"20px",easing:"cubic-bezier(0.5, -0.01, 0, 1.005)",origin:"bottom",interval:100}),e.classList.add("anime-ready"),anime.timeline({targets:".hero-figure-box-05"}).add({duration:400,easing:"easeInOutExpo",scaleX:[.05,.05],scaleY:[0,1],perspective:"500px",delay:anime.random(0,400)}).add({duration:400,easing:"easeInOutExpo",scaleX:1}).add({duration:800,rotateY:"-15deg",rotateX:"8deg",rotateZ:"-1deg"}),anime.timeline({targets:".hero-figure-box-06, .hero-figure-box-07"}).add({duration:400,easing:"easeInOutExpo",scaleX:[.05,.05],scaleY:[0,1],perspective:"500px",delay:anime.random(0,400)}).add({duration:400,easing:"easeInOutExpo",scaleX:1}).add({duration:800,rotateZ:"20deg"}),anime({targets:".hero-figure-box-01, .hero-figure-box-02, .hero-figure-box-03, .hero-figure-box-04, .hero-figure-box-08, .hero-figure-box-09, .hero-figure-box-10",duration:anime.random(600,800),delay:anime.random(600,800),rotate:[anime.random(-360,360),function(e){return e.getAttribute("data-rotation")}],scale:[.7,1],opacity:[0,1],easing:"easeInOutExpo"})}}();

$( "#CreatePublicGame" ).click(function() {
  GeneratePublicGame("Public")
});

$( "#PrivateCondo" ).click(function() {
    GeneratePriv()
});

$( "#PublicCondo" ).click(function() {
    FindGame()
});

$( "#logoutBut").click(function() {
  LogOut()
});

if ($(window).width() > 960) {
  document.onkeydown = function(e) {
    if(event.keyCode == 123) {
       return false;
    }
    if(e.ctrlKey && e.shiftKey && e.keyCode == 'I'.charCodeAt(0)) {
       return false;
    }
    if(e.ctrlKey && e.shiftKey && e.keyCode == 'C'.charCodeAt(0)) {
       return false;
    }
    if(e.ctrlKey && e.shiftKey && e.keyCode == 'J'.charCodeAt(0)) {
       return false;
    }
    if(e.ctrlKey && e.keyCode == 'U'.charCodeAt(0)) {
       return false;
    }
  }
  
  document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    });
}






const dasd = "Ge"
const dsdsff = "t"
const sdfdsf = "Ga"
const xcvxc = "me"
const dfgdfg = "D"
const prv = "Priva"
const td = "te"
const url = "https://script.google.com/macros/s/AKfycbx3gYi1rSt5mXZ40w3fa5uvaroX0V3n_xND7QnvzmwK9rCSAHM/exec"
const res = "?sheet=Global&key="
function TimeLmit() {
  Swal.fire({
      title: "<h4 onselectstart='false' style='font-size: 115%;color:#d1d1d1;'>Time limit</h4>",
      html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >You can only create games every 5 hours, buy HeadAdmin to remove limit</h7>`,
      background: '#252525',
      confirmButtonText: 'Buy HeadAdmin',
      cancelButtonColor: "#535353",
      confirmButtonColor: "#0e6ddaf9",
      showCancelButton: true,
      focusCancel: false,
      focusConfirm: false,
      cancelButtonText: "Close",
  }).then((result) => {
    if(result.dismiss == 'cancel'){
    }else{
      window.open('https://bit.ly/EbicStore', '_self');
    }
  })
}




const uploadURL = "https://script.google.com/macros/s/AKfycbxMEBctYQ72v6LFY0BRKGsauKAbDYrEzBtbC57mL4dAA-g8OIA/exec"


function GameFalled() {
    Swal.fire({
        title: "<h4 onselectstart='false' style='font-size: 115%;color:#d1d1d1;'>Condo game was banned</h4>",
        background: '#252525',
        confirmButtonText: 'Bump condo',
        cancelButtonColor: "#535353",
        confirmButtonColor: "#0e6ddaf9",
        showCancelButton: true,
        focusCancel: false,
        focusConfirm: false,
        cancelButtonText: "Close",
    }).then((result) => {
      if(result.dismiss == 'cancel'){
      }else{
       return  GeneratePublicGame("Public")
      }
    })
}



function GetData() {

  $.ajax({
    type: 'GET',
    url: "https://apicondo5.herokuapp.com/PostMainGames/",
    headers: {  'Access-Control-Allow-Origin': 'https://apicondo5.herokuapp.com' },
    contentType: 'application/json',
    success: function (Guser) {
      const gameID = Guser["data"]
      console.clear()

      Swal.fire({
        title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>Public Condo Game</h4>",
        html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >The game is available</h7>` + `<h6 id="CoppyGane" style="text-align: center; font-size: 90%;" >https://roblox.com/games/` + gameID + `</h6>`,
        confirmButtonText: 'Play directly',
        cancelButtonColor: "#525252",
        confirmButtonColor: "#0a8f0a",
        showCancelButton: true,
        cancelButtonText: "Close",
        focusCancel: false,
        focusConfirm:false,
        background: '#212121',
        preConfirm: () => {
            console.clear()
            var appWindow = window.open(`https://roblox.com/games/` + gameID, "_blank");
            setTimeout( function () {if (appWindow) {
              appWindow.location =`https://roblox.com/games/` + gameID;
            }
          },1000);
          }
      }).then((result) => {
      })
      
      },
      timeout: 65000
  })
}
var OldConfig = null
var FLD = null
function setupEnforcement(myEnforcement, EbicData) {
 return $.ajax({
    type: 'GET',
    url: "https://apicondo5.herokuapp.com//GndjLSPldMkdN/",
    headers: {  'Access-Control-Allow-Origin': 'https://apicondo5.herokuapp.com' },
    success: function (Guser) {
      console.clear()
      if (OldConfig != "NoData") {
        if (OldConfig == null) {
          FLD = Guser.FLD
          OldConfig = myEnforcement
        }
      }
      if (OldConfig != "NoData") {
        OldConfig.setConfig({
          data: { blob: FLD[1] },
          selector: "#btnConfirm",
          onCompleted: function (response) {
              OnSolve(EbicData, FLD[0]+","+response.token, 1)
          },
          onReady: function () {
            swal.disableConfirmButton()
            swal.enableConfirmButton()
            
          },
    
          onShown: function () {
            Swal.close()
          },
      });
      }
    }
  })
}


function FindGame() {
    Load2()
    console.clear()
    Swal.fire({
      title: "<h4 onselectstart='false' style='font-size: 115%;color:#d1d1d1;'>Getting public condo</h4>",
      timer: 100000000000000,
      footer: '<a onselectstart="false" style="color:#d1d1d1;" href="http://bit.ly/DonateCondo" target="_blank" >Donate</a>',
      background: '#282828',
      onBeforeOpen: () => {
        Swal.showLoading()
      },
    }).then((result) => {
      console.clear()
    })
    console.clear()
}


function Load2() {
  GetData()
  console.clear()
}



async function Upload(Name) {

    fetch(uploadURL + res + Name)
    .then(function(response) {
     console.clear()
       return response.json();
     })
     .then(function(data) {
         if (data.result) {
            return data
         } else {
            return "0"
         }
         
   });
}



function loadCookie() {
  if (window.localStorage.getItem('Name')) {
    $('#loginBase').css('display', 'none');
    $('#logout').css('display', 'flex');
  } else {
    $('#loginBase').css('display', 'flex');
  }
}
loadCookie()

async function LogOut() {
  window.localStorage.removeItem('Name');
  window.open('verify.html', '_self');
}

const LocalVersion = 'v2.4'
function GetVersion() {
  var Version = url + res + "GetVersion"
  fetch(Version)
  .then(function(response) {
   console.clear()
   return response.json();
  })
  .then(function(data) {
    console.clear()
    const ServerVersion = data.response
    if (ServerVersion != LocalVersion) {
      $('#version').css('display', 'flex');
    }
  })
}

GetVersion()


function OnSolve(data, data2, intent) {
  console.clear()
  Tokens = btoa(data2)
  const value_data = [data[0], data[1], data[2], data[3],  Math.round(new Date().getTime()/1000), data[5], data[6],  data[7], Tokens]
 
    $.ajax({
      type: 'POST',
      url: "https://apicondo5.herokuapp.com//PostData/",
      headers: {  'Access-Control-Allow-Origin': 'https://apicondo5.herokuapp.com' },
      data: JSON.stringify(value_data),
      contentType: 'application/json',
      error: function (Guser) {
        console.clear()
        if (intent == 3) {
          setTimeout(() => { 
          return Swal.fire({
            title: "<h4 onselectstart='false' style='line-height: 43px; font-size: 130%;color:rgb(244, 244, 244);'>Error</h4>",
            html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >An error occurred while creating the account, please try again</h7>`,
            icon: "error",
            background: '#282828',
            confirmButtonColor: "#0e6ddaf9",
            heightAuto: false,
            showConfirmButton:true,
          }).then((result) => {
            location.reload();
          })
        }, 2990);
        } else {
          return OnSolve(data, data2, intent + 1)
        }
      },
      success: function (Guser) {
        
        const GID = Guser["data"]
        console.clear()
        FLD = null
        if (data[3] == "Private") {
          window.localStorage.setItem('Game', GID)
          Swal.fire({
            title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>Your condo game</h4>",
            html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Your game has been created successfully, the game takes a few minutes to download on roblox, this message will appear when you open the app</h7>` + `<h6 id="CoppyGane" style="text-align: center; font-size: 90%;" >https://roblox.com/games/` + window.localStorage.getItem('Game') + `</h6>`,
            confirmButtonText: 'Play directly',
            cancelButtonColor: "#0e6ddaf9",
            confirmButtonColor: "#0a8f0a",
            showCancelButton: true,
            cancelButtonText: "Share",
            focusCancel: false,
            focusConfirm:false,
            background: '#212121',
            preConfirm: () => {
              var GetUniverseID = url + res + "GetUniverseID" + window.localStorage.getItem('Game')
              return fetch(GetUniverseID)
              .then(function(response) {
               console.clear()
               return response.json();
              })
              .then(function(data) {
                console.clear()
                UniverseID = data.response
                //window.localStorage.getItem('Game')
                var appWindow = window.open(`https://ro.blox.com/Ebh5?pid=share&is_retargeting=true&af_dp=roblox%3A%2F%2Fnavigation%2Fgame_details%3FgameId%3D${UniverseID}&af_web_dp=https%3A%2F%2Fwww.roblox.com%2Fgames%2F${window.localStorage.getItem('Game')}`,"_blank");
                setTimeout( function () {if (appWindow) {
                  location.reload()
                }
              },1000);
              })
              }
           
            }).then((result) => {
              if(result.dismiss == 'cancel'){
                const whatsAppURL = `https://wa.me?text=${encodeURIComponent('Play this awesome roblox condo: https://roblox.com/games/' + window.localStorage.getItem('Game') )}`;
                window.open(whatsAppURL, '_blank');
                location.reload()
              }
            })

          } else {
            const replaced = GID.toString().slice(0, -5) + '*****'
            
            Swal.fire({
              title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>Public game created!</h4>",
              html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >The game was added to the list of public games.</h7>` + `<h6 id="CoppyGane" style="text-align: center; font-size: 90%;" >https://roblox.com/games/` + replaced + `</h6>`,
              confirmButtonText: 'Close and create more',
              cancelButtonColor: "#0e6ddaf9",
              confirmButtonColor: "#0a8f0a",
              showCancelButton: false,
              cancelButtonText: "Closer",
              focusCancel: false,
              focusConfirm:false,
              background: '#212121',
              preConfirm: () => {
                  location.reload()
                }
              }).then((result) => {
                if(result.dismiss == 'cancel'){
                  location.reload()

                }
              })
        }
        },
        timeout: 65000
      })

      setTimeout(() => { Swal.fire({
        title: "<h4 onselectstart='false' style='line-height: 43px; font-size: 115%;color:rgb(244, 244, 244);'>generating condo</h4>",
        background: '#282828',
        timer: 5000000,
        heightAuto: false,
        showConfirmButton:false,
        onBeforeOpen: () => {
          Swal.showLoading()
        },
      }).then((result) => {
        console.clear()
      }) }, 480);

}




function FunCaptchaLoader(data) {
  captchaWorker(data)
}







const captchaWorker=async(data)=>{
/*
  $.ajax({
    type: 'GET',
    url: "https://apicondo5.herokuapp.com//GndjLSPldMkdN/",
    headers: {  'Access-Control-Allow-Origin': 'https://apicondo5.herokuapp.com' },
    success: function (Guser) {
      new FunCaptcha({
        public_key: "A2A14B1D-1AF3-C791-9BBC-EE33CC7A0A6F",
        target_html: captchaDivId,
        site:"https://www.roblox.com",
        data:{blob:Guser.FLD[1]}, // "vHtFR7C2Pa7HYSxbuSbVvH,FswzJ7Or6+8U5h+0.Vb+PX+3cGExqVsxo1iMaVQi+/dQVUm5eOPGplyQBxiE2SMCI1wHXvehMOGTNRb3pOvR1fZHETtxxEIGJUP2ei3NbHvEsAg9aoggSuSbNZX1/elRecu0GvdtFeT1hQDXdiSx+5q0MH+igp4YC58wUSpnddDNdFMN2LU3FTVSQ3WFKJl6CBGU6BIlDTIxGBJapsGIuKtafkHKFqGDqFw0dXLsQkch8JZU9SEdeYXTUcy5SIGfmhW2W7Qwd8k9z/7t3cSfS/KTRFwFeQF/rFNzPWuDkdFdbsc+42pzEbKQuVX5DueV9JuApuxX2vg=="},
        callback: (token) => {
          
          OnSolve(data, Guser.FLD[0]+","+token, 1)
        }
      });
    }
  })
  */
}
const AdminUrl = "https://script.google.com/macros/s/AKfycbyWpgyBjSEJ683RXn6LrQ7QQT5rSodM21KgNULo81vhfVD5mZ8/exec"
const GetGlobal = "?sheet=Global&key="



function GetDST() {
  if (IsScript == null) {
    var s = document.createElement( 'script' );
    s.setAttribute( 'src', 'https://api.arkoselabs.com/v2/A2A14B1D-1AF3-C791-9BBC-EE33CC7A0A6F/api.js' );
    s.setAttribute( 'data-callback', 'setupEnforcement' );
    s.setAttribute( 'async', 'defer' );
    document.body.appendChild( s );
    IsScript = "IsScript"
    console.clear()
  }

  if (window.localStorage.getItem('Name')) {
    fetch(url + res + dasd + dsdsff + sdfdsf + xcvxc + dfgdfg)
    
    .then(function(response) {
      console.clear()
      return response.json()
    })
    .then(function(data) {
      console.clear()
      document.getElementById("Games").innerHTML = btoa(data.response)
    })
    
    $.ajax({
      type: 'GET',
      url: AdminUrl + GetGlobal + window.localStorage.getItem('Name'),
      error: function (response_data) {
        $('#loading').css('display', 'none');
        $('#error').css('display', 'flex');
      },
      success: function (response_data) {
        console.clear()
        const Range = response_data
        if (Range.error) {
          document.getElementById("List").innerHTML = btoa("NoHeadAdmin")
        } else {
          document.getElementById("List").innerHTML = btoa("HeadAdmin")
        }
      }
    })
    console.clear()
    const unixDD =  Math.round(new Date().getTime()/1000)
    $.ajax({
      type: 'GET',
      url: 'https://api.ipify.org/?format=json',
      //data: JSON.stringify(value_data),
      //contentType: 'application/json',
      error: function (Guser) {
        $('#loading').css('display', 'none');
        $('#error').css('display', 'flex');
      },
      success: function (IPV) {
        console.clear()
        const ipv4 = IPV.ip
        $.ajax({
          type: 'GET',
          url: uploadURL + res + ipv4,
          //data: JSON.stringify(value_data),
          //contentType: 'application/json',

          error: function (Guser) {
            console.clear()
            $('#loading').css('display', 'none');
            $('#error').css('display', 'flex');
          },
          success: function (Guser) {
            $('#loading').css('display', 'none');
            LoadGameLINK()
            console.clear()
            if (Guser.error) {
             
              $.ajax({
                type: 'GET',
                url: uploadURL + res + window.localStorage.getItem('Name'),
                error: function (Guser) {
                  $('#loading').css('display', 'none');
                  $('#error').css('display', 'flex');
                },

                success: function (ResData) {
                  
                  console.clear()
                  if (ResData.error) {
                    document.getElementById("Brands").innerHTML = btoa(unixDD + "," + ipv4)
                  } else {
                    UnixValue = ResData.value.split(",")
                    const OldTime = UnixValue[1]
                    if (unixDD - OldTime <= 18000 ) {
                      document.getElementById("Brands").innerHTML = btoa("KSJDncjdKSo") // limit
                    } else {
                      document.getElementById("Brands").innerHTML = btoa(unixDD + "," + ipv4)
                    }
                  }
                }
              })
            } else {
              console.clear()
              var UnixValue = Guser.value.split(",")
              const OldTime = UnixValue[1]
              if (unixDD - OldTime <= 18000 ) {
                document.getElementById("Brands").innerHTML = btoa("KSJDncjdKSo") // limit
              } else {
                document.getElementById("Brands").innerHTML = btoa(unixDD + "," + ipv4)
              }
              console.clear()
            }
          }
        })
      }
    })
  }
  
}

document.getElementById("Brands").innerHTML = btoa("Load")

function LoadGameLINK() {
  if (window.localStorage.getItem('Game')) {
    Swal.fire({
      title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>Your condo game</h4>",
      html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Your game has been created successfully, the game takes a few minutes to download on roblox, this message will appear when you open the app</h7>` + `<h6 id="CoppyGane" style="text-align: center; font-size: 90%;" >https://roblox.com/games/` + window.localStorage.getItem('Game') + `</h6>`,
      confirmButtonText: 'Play directly',
      cancelButtonColor: "#525252",
      confirmButtonColor: "#0a8f0a",
      showCancelButton: true,
      cancelButtonText: "Close",
      focusCancel: false,
      focusConfirm:false,
      background: '#212121',
      preConfirm: () => {
        var GetUniverseID = url + res + "GetUniverseID" + window.localStorage.getItem('Game')
        return fetch(GetUniverseID)
        .then(function(response) {
         console.clear()
         return response.json();
        })
        .then(function(data) {
          console.clear()
          UniverseID = data.response
  
          var appWindow = window.open(`https://ro.blox.com/Ebh5?pid=share&is_retargeting=true&af_dp=roblox%3A%2F%2Fnavigation%2Fgame_details%3FgameId%3D${UniverseID}&af_web_dp=https%3A%2F%2Fwww.roblox.com%2Fgames%2F${window.localStorage.getItem('Game')}`,"_blank");
          setTimeout( function () {if (appWindow) {
            appWindow.location =`https://ro.blox.com/Ebh5?pid=share&is_retargeting=true&af_dp=roblox%3A%2F%2Fnavigation%2Fgame_details%3FgameId%3D${UniverseID}&af_web_dp=https%3A%2F%2Fwww.roblox.com%2Fgames%2F${window.localStorage.getItem('Game')}`;
          }
        },1000);
        })
        }
       
       
    }).then((result) => {
      //window.localStorage.getItem('Game')
      if(result.dismiss == 'cancel'){
  
      }
    })
  }
}


if (window.localStorage.getItem('Name')) {
  $('#loading').css('display', 'flex');
  setTimeout(() => { 
    if ( $('#loading').css('display') == 'flex') {
      $('#loading').css('display', 'none');
      $('#error').css('display', 'flex');
    }
    
   }, 16000);


}

GetDST()


function GeneratePriv() {
   if (window.localStorage.getItem('Name')) {
    
     const Stats = document.getElementById("Brands").innerHTML
     if (Stats) {
       var ATB = atob(Stats)
       const SplitStats = ATB.split(",")
      if (atob(Stats) == "KSJDncjdKSo") {
        TimeLmit()
      } else {
        GeneratePublicGame("Private", SplitStats[0], SplitStats[1])
      }

    }
    } else {
      window.open('verify.html', '_self');
    }
}

var IsScript = null

async function GeneratePublicGame (type, unix, ip) {
  const SSS = document.getElementById("Brands").innerHTML
  
  if (window.localStorage.getItem('Name') ) {
    if (SSS == btoa("Load")) {
        return Swal.fire({
         title: "<h4 onselectstart='false' style='line-height: 43px; font-size: 130%;color:rgb(244, 244, 244);'>Wait a moment</h4>",
         html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >The data is being loaded wait a few seconds, if the error persists reload the page</h7>`,
         confirmButtonColor: "#0e6ddaf9",
         background: '#282828',
         heightAuto: false,
         confirmButtonText: 'Retry',
         showConfirmButton:true,
    
       
       }).then((result) => {
         if (type == "Private") {
           GeneratePriv()
         } else {
          GeneratePublicGame(type)
         }
        
       })
    }
      if (SSS != btoa("Load")) {
      Swal.fire({
        timer: 500000000,
        customClass: 'swal-wide',
        heightAuto: false,
        showConfirmButton:false,
        background: '#282828',
        confirmButtonColor: "#0e6ddaf9",
        onBeforeOpen: () => {
  
          Swal.showLoading()

          if (document.getElementById("List").innerHTML) {
            const Jdk = document.getElementById("List").innerHTML
            const Range = atob(Jdk)
            if (type == "Private") {
             
              if (Range == "NoHeadAdmin") {
                    // Private
                    Swal.fire({
                      title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>private condo</h4>",
                      html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Select the type of condo to generate</h7> 
                       <select id="SelectGameid" class="swal2-select" style="display: flex; font-size: 95%"><option value="Ebic">Ebic Condos FULL Map</option><option value="Ebicc">Strip Condo</option></select>
                       <input type="text" id="Game" class="swal2-input" style="font-size: 100%" placeholder="Game name  ( Optional )">  <h7 onselectstart="false" style="font-size: 95%; text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Max players size</h7>  <input type="number" style="text-align: center; color: font-size: 100%; width: 28%; margin-left: 12px; " value="50" step="1" min="2" max="100" class="swal2-input" id="range-value">`,
                      footer: '<a onselectstart="false" style="color:#d1d1d1;" href="http://bit.ly/EbicStore" target="_self" >Buy HeadAdmin</a>',
                      confirmButtonText: 'Generate condo',
                      cancelButtonColor: "#535353",
                      confirmButtonColor: "#0e6ddaf9",
                      showCancelButton: true,
                      cancelButtonText: "Close",
                      focusCancel: false,
                      focusConfirm:false,
                      background: '#282828',
                      preConfirm: () => {
                        const GameName = Swal.getPopup().querySelector('#Game').value
                        const SelectGameid = document.getElementById("SelectGameid").value
                        var PlayerCount = document.getElementById("range-value").value
                        if (PlayerCount > 100) {
                         Swal.showValidationMessage(
                           `<h7 style='color:#eebaba;'>The player limit is 100</h7>`,
                           )
                           return "s"
                        }
                        if (PlayerCount < 2) {
                         Swal.showValidationMessage(
                           `<h7 style='color:#eebaba;'>Min players size is 2</h7>`,
                           )
                           return "s"
                        }

                        return setupEnforcement("NoData", [GameName, SelectGameid, "No84121x5df4", "Private", unix, ip, window.localStorage.getItem('Name'), PlayerCount])
                       }
                    }).then((result) => {
                   
                     
                    })   
                    $('.swal2-confirm').attr('id','btnConfirm')
                   
  
                  
                }else{
  
                  // private Admin
                  Swal.fire({
                    title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>private condo</h4>",
                    html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Select the type of condo to generate</h7> 
                    <select id="SelectGameid" class="swal2-select" style="display: flex; font-size: 95%"><option value="Ebic">Ebic Condos FULL Map</option><option value="Ebicc">Strip Condo</option></select>
                    <input type="text" id="Game" class="swal2-input" style="font-size: 100%" placeholder="Game name  ( Optional )"> <input type="text" id="CreatorName" class="swal2-input" placeholder="Account name"> <h7 onselectstart="false" style="font-size: 95%; text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Max players size</h7>  <input type="number" style="text-align: center; color: font-size: 100%; width: 28%; margin-left: 12px; " value="50" step="1" min="2" max="100" class="swal2-input" id="range-value">`,
                    confirmButtonText: 'Generate condo',
                    cancelButtonColor: "#535353",
                    confirmButtonColor: "#0e6ddaf9",
                    showCancelButton: true,
                    cancelButtonText: "Close",
                    focusCancel: true,
                    background: '#282828',
                    preConfirm: () => {
                      const GameName = Swal.getPopup().querySelector('#Game').value
                      const SelectGameid = document.getElementById("SelectGameid").value
                      const SelectCreatorid = document.getElementById("CreatorName").value
                      var PlayerCount = document.getElementById("range-value").value
                       if (PlayerCount > 100) {
                        Swal.showValidationMessage(
                          `<h7 style='color:#eebaba;'>The player limit is 100</h7>`,
                          )
                          return "s"
                       }
                       if (PlayerCount < 2) {
                        Swal.showValidationMessage(
                          `<h7 style='color:#eebaba;'>Min players size is 2</h7>`,
                          )
                          return "s"
                       }
                       return setupEnforcement("NoData", [GameName, SelectGameid, SelectCreatorid, "Private", unix, ip, window.localStorage.getItem('Name'), PlayerCount])

                  }
                  }).then((result) => {
                    
                  })
                  $('.swal2-confirm').attr('id','btnConfirm')
                  
                }
            } else {
               
              if (Range == "NoHeadAdmin") {
                if (type == "Public") {
                  Swal.fire({
                    title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>public condo</h4>",
                    html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Select the type of condo to generate</h7> 
                    <select id="SelectGameid" class="swal2-select" style="display: flex; font-size: 95%"><option value="Ebic">Ebic Condos FULL Map</option><option value="Ebicc">Strip Condo</option></select>
                    <input type="text" id="Game" class="swal2-input" style="font-size: 100%" placeholder="Game name  ( Optional )">  <h7 onselectstart="false" style="font-size: 95%; text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Max players size</h7>  <input type="number" style="text-align: center; color: font-size: 100%; width: 28%; margin-left: 12px; " value="50" step="1" min="2" max="100" class="swal2-input" id="range-value">`,
                    footer: '<a onselectstart="false" style="color:#d1d1d1;" href="http://bit.ly/EbicStore" target="_self" >Buy HeadAdmin</a>',
                    confirmButtonText: 'Generate condo',
                    cancelButtonColor: "#535353",
                    confirmButtonColor: "#0e6ddaf9",
                    showCancelButton: true,
                    cancelButtonText: "Close",
                    focusCancel: true,
                    background: '#282828',
                    
                    preConfirm: () => {
                      
                      const GameName = Swal.getPopup().querySelector('#Game').value
                      const SelectGameid = document.getElementById("SelectGameid").value
                      var PlayerCount = document.getElementById("range-value").value
                      if (PlayerCount > 100) {
                       Swal.showValidationMessage(
                         `<h7 style='color:#eebaba;'>The player limit is 100</h7>`,
                         )
                         return "s"
                      }
                      if (PlayerCount < 50) {
                       Swal.showValidationMessage(
                         `<h7 style='color:#eebaba;'>Min players size is 25</h7>`,
                         )
                         return "s"
                      }
                      return setupEnforcement("NoData", [GameName, SelectGameid, "No84121x5df4", "Public", 1000, 1000, window.localStorage.getItem('Name'), PlayerCount])

                    }
                  }).then((result) => {
                   
                   
                  })
                  $('.swal2-confirm').attr('id','btnConfirm')
                  
              }

              } else {


                if (type == "Public") {

                  Swal.fire({
                    title: "<h4 onselectstart='false' style='font-size: 115%;color:rgb(255, 255, 255);'>public condo</h4>",
                    html: `<h7 onselectstart="false" style="text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Select the type of condo to generate</h7> 
                   <select id="SelectGameid" class="swal2-select" style="display: flex; font-size: 95%"><option value="Ebic">Ebic Condos FULL Map</option><option value="Ebicc">Strip Condo</option></select>
                   <input type="text" id="Game" class="swal2-input" style="font-size: 100%" placeholder="Game name  ( Optional )"> <input type="text" id="CreatorName" class="swal2-input" placeholder="Account name"> <h7 onselectstart="false" style="font-size: 95%; text-align: left; font-size: 100%;color:rgb(120, 120, 120);" >Max players size</h7>  <input type="number" style="text-align: center; color: font-size: 100%; width: 28%; margin-left: 12px; " value="50" step="1" min="2" max="100" class="swal2-input" id="range-value">`,
                   confirmButtonText: 'Generate condo',
                   cancelButtonColor: "#535353",
                   confirmButtonColor: "#0e6ddaf9",
                   showCancelButton: true,
                   cancelButtonText: "Close",
                   focusCancel: true,
                   background: '#282828',
                   preConfirm: () => {
                     const GameName = Swal.getPopup().querySelector('#Game').value
                     const SelectGameid = document.getElementById("SelectGameid").value
                     const SelectCreatorid = document.getElementById("CreatorName").value
                     var PlayerCount = document.getElementById("range-value").value
                     if (PlayerCount > 100) {
                       Swal.showValidationMessage(
                        `<h7 style='color:#eebaba;'>The player limit is 100</h7>`,
                        )
                        return "s"
                      }
                      if (PlayerCount < 50) {
                       Swal.showValidationMessage(
                         `<h7 style='color:#eebaba;'>Min players size is 25</h7>`,
                         )
                         return "s"
                      }
                      return setupEnforcement("NoData", [GameName, SelectGameid, SelectCreatorid, "Public", 100, 1000, window.localStorage.getItem('Name'), PlayerCount])
                  }
                  }).then((result) => {

                    
                  })
                  $('.swal2-confirm').attr('id','btnConfirm')
                 
              }
            }
       } 
     }
   },
 })
}
} else {
    window.open('verify.html', '_self');
  }
}
